Шаг 1: Установка IntelliJ IDEA
1. Перейдите на официальный веб-сайт IntelliJ IDEA (https://www.jetbrains.com/idea/) и загрузите последнюю версию IntelliJ IDEA для вашей операционной системы.
2. Запустите установщик и следуйте инструкциям на экране для установки IntelliJ IDEA на ваш компьютер. После завершения установки запустите IntelliJ IDEA.

Шаг 2: Настройка проекта
1. Откройте IntelliJ IDEA.
2. Создайте новый проект: выберите "Create New Project" на экране приветствия или откройте меню "File" и выберите "New" -> "Project".
3. В появившемся окне выберите "Java" в левой панели, укажите путь к папке проекта и нажмите "Next".
4. Укажите настройки проекта, такие как уровень языка Java и SDK. Если у вас нет SDK, выберите "Download JDK" и установите JDK на ваш компьютер. Щелкните "Next".

Шаг 3: Настройка зависимостей в файле pom.xml (для Maven)
1. В IntelliJ IDEA откройте файл "pom.xml" в своем проекте.
2. Добавьте следующие зависимости в раздел `<dependencies>`:
   ```xml
   <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty-shaded</artifactId>
      <version>1.40.0</version>
   </dependency>
   <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>1.40.0</version>
   </dependency>
   <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>1.40.0</version>
   </dependency>
   ```

Шаг 4: Генерация кода Protocol Buffers
1. Создайте файл с расширением `.proto` в вашем проекте. Например, `example.proto`.
2. Определите ваши сообщения и сервисы в файле `.proto`. Например:
   ```protobuf
   syntax = "proto3";
   
   message HelloRequest {
      string name = 1;
   }
   
   message HelloResponse {
      string greeting = 1;
   }
   
   service Greeter {
      rpc SayHello(HelloRequest) returns (HelloResponse);
   }
   ```
   
3. Убедитесь, что у вас установлен Protocol Buffers Compiler (`protoc`). Если его нет, установите его согласно инструкциям для вашей операционной системы.

4. Зарегистрируйте плагин Protocol Buffers в IntelliJ IDEA:
   - Откройте настройки IntelliJ IDEA (File -> Settings).
   - В разделе "Plugins" найдите плагин "Protocol Buffers support" и установите его.

5. Сгенерируйте код Java из `.proto` файла:
   - Откройте `.proto` файл в IntelliJ IDEA.
   - Щелкните правой кнопкой мыши внутри файла и выберите "Generate Protobuf sources" -> "Generate Java sources".

Шаг 5: Использование gRPC в Java
1. Создайте классы сервера и клиента, которые будут использовать gRPC:
   - Создайте класс сервера, реализующий ваш сгенерированный сервис.
   - Создайте класс клиента, который будет использовать сгенерированный клиентский stub.

2. Пример кода сервера:
   ```java
   import io.grpc.Server;
   import io.grpc.ServerBuilder;
   
   public class GrpcServer {
      private Server server;
   
      public void start() throws IOException {
         int port = 50051; // Укажите порт, на котором сервер будет слушать
   
         server = ServerBuilder.forPort(port)
            .addService(new MyGreeterImpl()) // MyGreeterImpl - ваша реализация сервиса Greeter
            .build()
            .start();
   
         System.out.println("Server started, listening on port " + port);
   
         Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.err.println("Shutting down gRPC server since JVM is shutting down.");
            GrpcServer.this.stop();
            System.err.println("Server shut down.");
         }));
      }
   
      public void stop() {
         if (server != null) {
            server.shutdown();
         }
      }
   
      public void blockUntilShutdown() throws InterruptedException {
         if (server != null) {
            server.awaitTermination();
         }
      }
   
      public static void main(String[] args) throws IOException, InterruptedException {
         GrpcServer grpcServer = new GrpcServer();
         grpcServer.start();
         grpcServer.blockUntilShutdown();
      }
   }
   ```

3. Пример кода клиента:
   ```java
   import io.grpc.ManagedChannel;
   import io.grpc.ManagedChannelBuilder;
   
   public class GrpcClient {
      private final ManagedChannel channel;
      private final GreeterGrpc.GreeterBlockingStub blockingStub;
   
      public GrpcClient(String host, int port) {
         channel = ManagedChannelBuilder.forAddress(host, port)
            .usePlaintext()
            .build();
   
         blockingStub = GreeterGrpc.newBlockingStub(channel);
      }
   
      public void shutdown() {
         channel.shutdown();
      }
   
      public void sayHello(String name) {
         HelloRequest request = HelloRequest.newBuilder().setName(name).build();
   
         HelloResponse response = blockingStub.sayHello(request);
   
         System.out.println("Response: " + response.getGreeting());
      }
   
      public static void main(String[] args) {
         GrpcClient grpcClient = new GrpcClient("localhost", 50051); // Укажите хост и порт сервера gRPC
   
         grpcClient.sayHello("John"); // Вызов метода sayHello на сервере
         grpcClient.shutdown();
      }
   }
   ```

Теперь вы готовы использовать gRPC с Protocol Buffers в вашем проекте Java, созданном в IntelliJ IDEA.